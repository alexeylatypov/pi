<?php
/**
* NOTE: Parallel Thread class
*
* Get and run function in background
*
* Notes:
*
* 
**/
class ParallelThread extends Thread {
    private function __construct(Closure $closure, array $args = []) {
        $this->closure = $closure;
        $this->args    = $args;
		$this->time_start = time();
		$this->duration = 0;
    }
    public function run() {
        $closure = $this->closure;
        $this->synchronized(function() use($closure) {
            array_push($this->result['result'], $closure(...$this->args);
            $this->notify();
        });
    }
    public function getResult() {
        return $this->synchronized(function(){
            while (!$this->result['result'])
                $this->wait();
			array_push($this->result['duration'], time() - $time_start);
            return $this->result;
        });
    }
    
    public static function add(Closure $closure, array $args = []) {
        $resultTread = 
            new self($closure, $args);
        $resultTread->start();
        return $resultTread;
    }
    
    protected $closure;
    protected $args;
    protected $result = array( 'result' => 0, 'duration' => 0);
	protected $time_start;
	public $duration;

}

?>